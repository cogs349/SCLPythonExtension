% python.grm
% ELEC 490/498 Group 22
% Enhancing SCL Packet Parsing Language (Python Extension)

% Harmehar Singh #:20264461
% Joel Coghlin #:20228087
% Omar Badawi #:20200423

% This is the Python Grammar file. It specifies the Python structures
% that our TXL Parser will encounter. Since Python is interpreted, and not
% compiled, the structure of the language varies slightly.

% TODO:
% undefined nonterminals: 

% =============== Lexical Properties of Python ===============
% Comments in Python
comments
    #
end comments

% Keywords in Python
keys 
    if     elif    else     for
    while  break   continue return
    True   False   None     import
    from   as      def      with
    del    global  and      or
    not    is      in       continue
    return int     break    long
    float  switch  char     default
end keys

% Compounds
compounds
    ->      <<      >>      <=      >=      ==      !=
    &&      ||      *=      /=      '%=     +=      -=
    <<=     >>=     &=      ^=      |=
end compounds

% ============================================================


% =============== Syntax of Python ===========================

% Define a python program as "Every line"
define pyprogram
    [py_program]
end define

% define "Every line" as "Functions or declarations"
define py_program
    [repeat definition_or_declaration]
end define

% define "definitions" and "declarations" (note that definitions are functions)
define definition_or_declaration
    [function_definition] | [declaration]
end define

% define a python function. Since Python functions are interpreted based on indentation,
% it is essential that the function body be surrounded by an [IN] and [EX].
define function_definition
    [NL] 'def [function_header]':
    [NL] [IN] [py_program] [NL] [EX]
end define

% a function header could be used in a function_definition, or as a function call.
define function_header
    [name]'( [opt arguments] ')
end define

% define arguments that are contained in a function definition
% if there are multiple, they must be seperated by commas.
define arguments
    [argument] | [argument] ', [arguments]
end define

% define a single argument
define argument
    [name]
end define

% a declaration is any line of code. function definitions are unique, but declarations are everything else.
define declaration
      [assignment]
    | [control_statment]
    | [import_statement]
    | [expression_statement]
end define

% Define an assignment to a variable. Empty or not.
define assignment
    [name] '= [value] [NL]
    | [name] '= 'None' [NL]
    | [name] '= '[] [NL]
    | [name] '= '{} [NL]
    | [name] '= '[ [array_content] ']
    | [name] '= '{ [array_content] '}
end define

% control statements add complexity to the grammar, but are going to be essential for pretty printing the packets
define control_statment
      [control_flow_statement]
    | [for_loop_header]
    | [if_statement_header]
    | [else_statement_header]
    | [while_loop_header]
    | [elif_statement_header]
end define

% simple execution control statements that 
define control_flow_statement
    'continue [NL] | 'break [NL] | 'pass [NL]
end define

% In python, there are a few ways to write for-loop conditions. so loop_value could be a few things (see below)
define for_loop_header
    'for [name] 'in [loop_value] ':
end define

% loops can traverse based on a counter, or in for-each loops, repeat using each value in a list
define loop_value
    'range( [value]') | [name]
end define

% if statements can be written in a couple ways as well.
define if_statement_header
    'if [condition]': [NL] [IN] [if_body] 
    | 'if [condition] [py_program] 'else [pyprogram]
    | [value]'if [condition] 'else [value]
end define

%conditions will decide if loops run/stop or not. they can be in the form of a comparison, or a boolean.
define condition
    [value][conditional_operator][value]
    | [name]
end define

define conditional_operator
    '< | '> | '== | '!= | '<= | '>=
end define 

define if_body
    [py_program][NL]
    'else: [NL]
    [IN][py_program][EX]
end define

% a value is anything that could be on the right side of a definition
define value
    [integer] | [stringlit] | [charlit] | [boolean] | [float]
end define

% define an integer as at least one digit
define integer
    [repeat digit+]
end define

% a digit is any number
define digit
    [0123456789]
end define

% a name is simply a stringlit
define name
    [stringlit]
end define

% type casts are used frequently in Python, and will be needed for pretty printing at the end of the program.
define type_cast
    'int( [value] ') | 'str( [value] ') | 'float( [value] ')
end define

% boolean values are case sensitive in Python
define boolean
    'True | 'False
end define

% all the parser needs to know is that floats are two integers seperated by a decimal point
define float
    [integer] '. [integer]
end define